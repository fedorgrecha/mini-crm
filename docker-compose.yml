services:
  pm2:
    build:
      context: .
      dockerfile: docker/node/Dockerfile
      target: pm2
    restart: unless-stopped
    container_name: mini-crm-pm2
    environment:
      - NODE_ENV=production
    volumes:
      - .:/app
      - node_modules_data:/app/node_modules
      - ./logs:/app/logs
    env_file:
      - .env
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - mini-crm-network

  nginx:
    image: nginx:alpine
    container_name: mini-crm-nginx
    restart: unless-stopped
    ports:
      - "8080:8080"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - pm2
    networks:
      - mini-crm-network

  app:
    build:
      context: .
      dockerfile: docker/node/Dockerfile
      target: local
    container_name: mini-crm-app
    restart: unless-stopped
    ports:
      - "3000:3000"
      - "3001:3001"
      - "9229:9229"
    volumes:
      - .:/app
      - node_modules_data:/app/node_modules
    env_file:
      - .env.dev
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - mini-crm-network

  mysql:
    image: mysql:8.0
    container_name: mini-crm-mysql
    restart: unless-stopped
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: root_password
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_USER: ${DB_USERNAME}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 10s
      retries: 10
    networks:
      - mini-crm-network

  mysql-test:
    image: mysql:8.0
    container_name: mini-crm-mysql-test
    restart: unless-stopped
    ports:
      - "3307:3306"
    environment:
      MYSQL_ROOT_PASSWORD: root_password
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_USER: ${DB_USERNAME}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    tmpfs:
      - /var/lib/mysql
    networks:
      - mini-crm-network

  redis:
    image: redis:7-alpine
    container_name: mini-crm-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      timeout: 10s
      retries: 10
    networks:
      - mini-crm-network

  redis-test:
    image: redis:7-alpine
    container_name: mini-crm-redis-test
    restart: unless-stopped
    ports:
      - "6380:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD}
    tmpfs:
      - /data
    networks:
      - mini-crm-network

  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: mini-crm-redis-ui
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      REDIS_HOSTS: local:redis:6379:0:${REDIS_PASSWORD}
    depends_on:
      - redis
    networks:
      - mini-crm-network

  mailhog:
    image: mailhog/mailhog:latest
    container_name: mini-crm-mailhog
    restart: unless-stopped
    ports:
      - "1025:1025"
      - "8025:8025"
    networks:
      - mini-crm-network

networks:
  mini-crm-network:
    driver: bridge

volumes:
  node_modules_data:
  mysql_data:
  redis_data:
