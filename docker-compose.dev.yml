version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: docker/node/Dockerfile.prod
    container_name: mini-crm-app
    restart: unless-stopped
    ports:
      - "${APP_PORT:-3000}:3000"
      - "${WS_PORT:-3001}:3001"
    env_file:
      - .env
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - mini-crm-network
    command: npm run start:prod

  mysql:
    image: mysql:8.0
    container_name: mini-crm-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: root_password
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_USER: ${DB_USERNAME}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 10s
      retries: 10
    networks:
      - mini-crm-network

  redis:
    image: redis:7-alpine
    container_name: mini-crm-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      timeout: 10s
      retries: 10
    networks:
      - mini-crm-network

  mailhog:
    image: mailhog/mailhog:latest
    container_name: mini-crm-mailhog
    restart: unless-stopped
    ports:
      - "1025:1025"
      - "8025:8025"
    networks:
      - mini-crm-network

networks:
  mini-crm-network:
    driver: bridge

volumes:
  mysql_data:
  redis_data:
